// idee: sammeln alles was der ausspuckt, weil dann für solid shit und für transparenz und son müll
import {checkFramebuffer} from "../../../../Util/FramebufferCheck";
import {MainController} from "../../../MainController";

export class SolidGeometryPassStorage {

    // Generated By Geometry Pass!
    geometry_framebuffer: WebGLFramebuffer;

    position_texture: WebGLTexture;
    albedo_texture: WebGLTexture;
    specular_texture: WebGLTexture;
    normal_texture: WebGLTexture;
    material_texture: WebGLTexture;
    depth_texture: WebGLTexture;

    setupFrame() {

    }

    bindFramebufferAndShader(GL: WebGL2RenderingContext) {
        GL.bindFramebuffer(GL.FRAMEBUFFER, this.geometry_framebuffer);
        MainController.ShaderController.useGeometryShader();
    }

    constructor(GL: WebGL2RenderingContext, SIZE: number) {
        const INTERN_FORMAT = GL.RGBA32F;
        const FILTER = GL.NEAREST;
        const LEVEL = 1;

        ////////////////////////////////////////////
        // BIND FRAMEBUFFER
        ////////////////////////////////////////////
        this.geometry_framebuffer = GL.createFramebuffer();
        GL.bindFramebuffer(GL.FRAMEBUFFER, this.geometry_framebuffer);
        GL.activeTexture(GL.TEXTURE0);

        ////////////////////////////////////////////
        // BIND DEPTH BUFFER
        ////////////////////////////////////////////
        /*
        this.geometry_depth_buffer = GL.createRenderbuffer();
        GL.bindRenderbuffer(GL.RENDERBUFFER, this.geometry_depth_buffer);
        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH24_STENCIL8, SIZE, SIZE);
        GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_STENCIL_ATTACHMENT, GL.RENDERBUFFER, this.geometry_depth_buffer);
        */

        ////////////////////////////////////////////
        // BIND DEPTH Texture
        ////////////////////////////////////////////
        this.depth_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.depth_texture);
        // GL.texImage2D(GL.TEXTURE_2D, 0, GL.DEPTH_COMPONENT32F, SIZE, SIZE, 0, GL.DEPTH_COMPONENT, GL.FLOAT, null);
        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            GL.DEPTH_COMPONENT32F,
            SIZE,
            SIZE
        );
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.TEXTURE_2D, this.depth_texture, 0);

        ////////////////////////////////////////////
        // CREATE POSITION TEXTURE
        ////////////////////////////////////////////
        this.position_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.position_texture);
        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            INTERN_FORMAT,
            SIZE,
            SIZE
        );
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, this.position_texture, 0);


        ////////////////////////////////////////////
        // CREATE POSITION TEXTURE
        ////////////////////////////////////////////
        this.normal_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.normal_texture);
        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            INTERN_FORMAT,
            SIZE,
            SIZE
        );
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT1, GL.TEXTURE_2D, this.normal_texture, 0);


        ////////////////////////////////////////////
        // CREATE ALBEDO TEXTURE
        ////////////////////////////////////////////
        this.albedo_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.albedo_texture);
        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            INTERN_FORMAT,
            SIZE,
            SIZE
        );
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT2, GL.TEXTURE_2D, this.albedo_texture, 0);


        ////////////////////////////////////////////
        // CREATE SPECULAR TEXTURE
        ////////////////////////////////////////////
        this.specular_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.specular_texture);
        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            INTERN_FORMAT,
            SIZE,
            SIZE
        );
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT3, GL.TEXTURE_2D, this.specular_texture, 0);


        ////////////////////////////////////////////
        // CREATE MATERIAL TEXTURE
        ////////////////////////////////////////////
        this.material_texture = GL.createTexture();
        GL.bindTexture(GL.TEXTURE_2D, this.material_texture);
        //GL.texImage2D(GL.TEXTURE_2D, 0, INTERN_FORMAT, SIZE, SIZE, 0, GL.RGB32F, GL.FLOAT, null);

        GL.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, 0);
        GL.texStorage2D(
            GL.TEXTURE_2D,
            LEVEL,
            INTERN_FORMAT,
            SIZE,
            SIZE
        );

        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, FILTER);
        GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, FILTER);
        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT4, GL.TEXTURE_2D, this.material_texture, 0);


        ////////////////////////////////////////////
        // SETUP DRAW BUFFER
        // CHECK STATUS
        // & UNBIND THE SHIT
        ////////////////////////////////////////////
        GL.drawBuffers([
            GL.COLOR_ATTACHMENT0,
            GL.COLOR_ATTACHMENT1,
            GL.COLOR_ATTACHMENT2,
            GL.COLOR_ATTACHMENT3,
            GL.COLOR_ATTACHMENT4
        ]);

       //  MainController.Log.info("PassStorage", "finished: SolidGeometryPassStorage");
        checkFramebuffer(GL, this.geometry_framebuffer);

        // reset used bindings
        GL.bindRenderbuffer(GL.RENDERBUFFER, null);
        GL.bindTexture(GL.TEXTURE_2D, null);
        GL.bindFramebuffer(GL.FRAMEBUFFER, null);

    }
    
}